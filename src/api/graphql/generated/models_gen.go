// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/vnlab/makeshop-payment/src/domain/entities"
)

type AuthResponse struct {
	Token string         `json:"token"`
	User  *entities.User `json:"user"`
}

type ChangePasswordInput struct {
	CurrentPassword string `json:"currentPassword"`
	NewPassword     string `json:"newPassword"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type MFASettingsInput struct {
	Enabled bool `json:"enabled"`
	TypeID  *int `json:"typeId,omitempty"`
}

type MFAType struct {
	ID        string    `json:"id"`
	No        int       `json:"no"`
	Title     string    `json:"title"`
	IsActive  int       `json:"isActive"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type Mutation struct {
}

type PaginatedUsers struct {
	Users      []*entities.User `json:"users"`
	Page       int              `json:"page"`
	PageSize   int              `json:"pageSize"`
	TotalPages int              `json:"totalPages"`
}

type Query struct {
}

type RegisterInput struct {
	Email         string `json:"email"`
	Password      string `json:"password"`
	FirstName     string `json:"firstName"`
	LastName      string `json:"lastName"`
	FirstNameKana string `json:"firstNameKana"`
	LastNameKana  string `json:"lastNameKana"`
}

type UpdateProfileInput struct {
	FirstName     string `json:"firstName"`
	LastName      string `json:"lastName"`
	FirstNameKana string `json:"firstNameKana"`
	LastNameKana  string `json:"lastNameKana"`
}

type RoleCode string

const (
	RoleCodeAdmin    RoleCode = "ADMIN"
	RoleCodeCustomer RoleCode = "CUSTOMER"
)

var AllRoleCode = []RoleCode{
	RoleCodeAdmin,
	RoleCodeCustomer,
}

func (e RoleCode) IsValid() bool {
	switch e {
	case RoleCodeAdmin, RoleCodeCustomer:
		return true
	}
	return false
}

func (e RoleCode) String() string {
	return string(e)
}

func (e *RoleCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleCode", str)
	}
	return nil
}

func (e RoleCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
